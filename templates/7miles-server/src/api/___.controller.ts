import { Request, ResponseToolkit } from "@hapi/hapi";
import { inject, injectable } from "inversify";
import { TYPES } from "../ioc/types";
import { Logger } from "winston";
import { HapiRoute } from "../decorators/decorators";
import { HapiController } from "./hapi-controller";
import * as Joi from '@hapi/joi';
import * as Boom from "@hapi/boom";
import { Mapper } from "../helpers/mapper";
import { I{{capitalize operation_name}}Controller } from './interfaces/{{lowercase operation_name}}.interface';
import { {{modelsForController operation}} } from '../model/models';

/**
 * This file is automatically generated by swagger.  This is a stub.  It is expected that developers will fill in the logic
 * for each method - as generated each endpoint will return a 501 - not implemented.
 *
 * IT IS NOT SAFE TO OVERWRITE AN EXISTING FILE WITH THIS ONE.
 *
 * If there are changes to the swagger that describes routes implemented in this controller, the related interface will
 * change and the TypeScript compiler will complain that the controller does not implement the interface correctly.  In
 * this case, you can find the missing (added) method(s) in the generated controller and copy the stubs to your implementation.
 */
@injectable()
class {{capitalize operation_name}}Controller extends HapiController {

  /**
   * Here we are also injecting the car service to manage interactions with the database
   * in addition to the logger and mapper.  You can inject as many dependencies as you need.
   *
   * This is a test.
   */
  constructor(
      @inject(TYPES.Logger) private logger: Logger,
      @inject(TYPES.Mapper) private mapper: Mapper)
  {
      super();
      this.logger.info('Created controller {{capitalize operation_name}}Controller');
  }

{{#each operation}}
  {{#each this.path}}
    {{#validMethod @key}}
/**
 {{#each ../descriptionLines}}
 * {{{this}}}
 {{/each}}
 */
  @HapiRoute({
    method: '{{allcaps @key}}',
    path: '{{colonToCurlyBrace ../../path_name}}',
    options: {
      validate: { },
      description: '{{ ../summary }}',
      tags: [{{#each ../tags}}'{{this}}'{{/each}}],
      auth: false
    }
  })
  public async {{../operationId}}(request: Request, toolkit: ResponseToolkit) {
   return toolkit.response().code(501);
  }

    {{/validMethod}}
  {{/each}}
{{/each}}
}

export { {{capitalize operation_name}}Controller }
