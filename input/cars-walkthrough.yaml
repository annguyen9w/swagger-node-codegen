openapi: "3.0.0"
info:
  version: 1.0.0
  title: Swagger Petstore
  license:
    name: MIT
servers:
  - url: http://petstore.swagger.io/v1
paths:
  /helloworld:
    get:
      summary:  Returns "Hello world!"
      operationId: helloWorld
      tags:
        - test
      responses:
        '200':
          description:  Success
          content:
            application/json:
              schema:
                type: string
  /cars:
    get:
      summary: List all cars
      operationId: getAllCars
      tags:
        - cars
      responses:
        '200':
          description: A list of all cars in the system
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Car"
    post:
      summary: Create a car
      operationId: createCar
      tags:
        - cars
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
  /cars/make/{make}:
    get:
      summary: List cars by make
      operationId: getCarsByMake
      tags:
        - cars
      parameters:
        - name: make
          in: path
          required: true
          description: value of the "make" property to query by
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Car"

  /cars/{id}:
    get:
      summary: Info for a specific car
      operationId: getCarById
      tags:
        - cars
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the car to retrieve
          schema:
            type: number
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Car"
    put:
      summary: Updates information for a specific car
      operationId: updateCar
      tags:
        - cars
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the car to update
          schema:
            type: number
        - name: data
          in: body
          required: true
          description: Updated data for a car
          schema:
            $ref: "#/components/schemas/Car"
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Car"
    delete:
      summary: Deletes a car
      operationId: deleteCar
      tags:
        - cars
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the car to delete
          schema:
            type: number
      responses:
        '200':
          description: Expected response to a valid request

components:
  schemas:
    Car:
      type: object
      required:
        - id
        - name
        - make
        - model
        - color
        - entryNumber
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        make:
          type: string
        model:
          type: string
        entryNumber:
          type: integer
